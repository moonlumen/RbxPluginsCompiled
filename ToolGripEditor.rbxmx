<roblox version="4">
  <Item class="Script" referent="0">
    <Properties>
      <string name="Name">ToolGripEditor</string>
      <string name="Source">------------------------------------------------------------------------------------------------------
-- @ CloneTrooper1019, 2019
--   Tool Grip Editor v2.0!
------------------------------------------------------------------------------------------------------
-- Setup
------------------------------------------------------------------------------------------------------

local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Selection = game:GetService("Selection")
local Studio = settings():GetService("Studio")
local Players = game:GetService("Players")

local modules = script.Modules
local editor = require(modules.ToolEditor)

local PLUGIN_NAME = "Tool Grip Editor"
local PLUGIN_ICON = "rbxassetid://4465723148"
local PLUGIN_SUMMARY = "A plugin which makes it much easier to edit the grip of a tool!"

local FOCAL_OFFSET = Vector3.new(1.5, 0.5, -2)
local IS_LOCAL = (plugin.Name:find(".rbxm") ~= nil)

local function getId(str)
	if IS_LOCAL then
		str ..= " (LOCAL)"
	end

	return str
end

------------------------------------------------------------------------------------------------------
-- Preview Window
------------------------------------------------------------------------------------------------------

local ui = script.UI

local preview, button do
	local pluginName = getId(PLUGIN_NAME)
	local widgetName = getId(script.Name)

	local config = DockWidgetPluginGuiInfo.new(Enum.InitialDockState.Left, true, false)
	preview = plugin:CreateDockWidgetPluginGui(widgetName, config)
	preview.ZIndexBehavior = "Sibling"
	preview.Title = pluginName
	preview.Name = widgetName
	
	if not _G.Toolbar2032622 then
		_G.Toolbar2032622 = plugin:CreateToolbar("CloneTrooper1019")
	end
	
	local buttonId = getId("ToolGripEditorButton")
	button = _G[buttonId]
	
	if not button then
		button = _G.Toolbar2032622:CreateButton(pluginName, PLUGIN_SUMMARY, PLUGIN_ICON)
		_G[buttonId] = button
	end
end

local camera = Instance.new("Camera")
camera.FieldOfView = 60
camera.Parent = preview

local vpFrame = Instance.new("ViewportFrame")
vpFrame.LightColor = Color3.new(1, 1, 1)
vpFrame.Size = UDim2.new(1, 0, 1, 0)
vpFrame.CurrentCamera = camera
vpFrame.Parent = preview

local editButton = ui.EditButton
editButton.Parent = preview

local selectATool = ui.SelectATool
selectATool.Parent = preview

local ribbonTools = ui.RibbonTools
ribbonTools.Parent = preview

local inputSink = ui.InputSink
inputSink.Parent = preview

local enterUsername = ui.EnterUsername
enterUsername.Parent = preview

local function updateTheme()
	local theme = Studio.Theme
	local input = enterUsername.Input

	local mainBG = theme:GetColor("MainBackground")
	local mainText = theme:GetColor("MainText")

	enterUsername.BackgroundColor3 = mainBG
	enterUsername.TextColor3 = mainText

	vpFrame.BackgroundColor3 = mainBG
	input.TextColor3 = mainText

	input.BackgroundColor3 = theme:GetColor("InputFieldBackground")
	input.BorderColor3 = theme:GetColor("InputFieldBorder")
end

local function getCameraLookVector()
	local studioCam = workspace.CurrentCamera
	return studioCam.CFrame.LookVector
end

local function updateRibbonButtons(selectedTool)
	for _,button in pairs(ribbonTools:GetChildren()) do
		if button:IsA("TextButton") then
			if button.Name == selectedTool.Name then
				button.Style = "RobloxRoundDefaultButton"
			else
				button.Style = "RobloxRoundButton"
			end
		end
	end
end

local function updateWindow(delta)
	if not preview.Enabled then
		return
	end

	-- Update the animations
	if RunService:IsEdit() then
		editor:StepAnimator(delta)
	end
	
	-- Update the camera
	local rootPart = editor.RootPart
	local extents = editor:GetCameraZoom()

	local lookVector = getCameraLookVector()
	local focus = rootPart.CFrame

	if editor.Tool then
		focus = focus * FOCAL_OFFSET
	else
		focus = focus.Position
	end
	
	local goal = CFrame.new(focus - (lookVector * extents), focus)
	camera.CFrame = camera.CFrame:Lerp(goal, math.min(1, delta * 20))
	vpFrame.LightDirection = lookVector
	
	-- Update the ribbon buttons
	if ribbonTools.Visible then
		local selectedTool = plugin:GetSelectedRibbonTool()
		local currentTool = editor.LastRibbonTool

		if currentTool ~= selectedTool then
			editor.LastRibbonTool = selectedTool
			updateRibbonButtons(selectedTool)
		end
	end

	-- Update the ghost arm
	if editor.InUse then
		local ghostArm = editor.GhostArm
		local rightGrip = editor.RightGrip
		local directHandle = editor.DirectHandle
		
		if directHandle and rightGrip and ghostArm then
			local cf = directHandle.CFrame 
				* rightGrip.C1
				* rightGrip.C0:Inverse()
			
			ghostArm:SetPrimaryPartCFrame(cf)
		end
	end
end

updateTheme()

editor:SetParent(vpFrame)
editor:StartAnimations()

Studio.ThemeChanged:Connect(updateTheme)
RunService.Heartbeat:Connect(updateWindow)

------------------------------------------------------------------------------------------------------
-- Plugin Menu
------------------------------------------------------------------------------------------------------

local input = enterUsername.Input

local function newId()
	return HttpService:GenerateGUID()
end

local function onFocusLost(enterPressed)
	enterUsername.Visible = false

	if enterPressed then
		local userName = input.Text

		if userName == "" then
			warn("No username was entered!")
			return
		end

		warn("Fetching UserId...")
		
		local gotUserId, userId = pcall(function ()
			return Players:GetUserIdFromNameAsync(userName)
		end)

		if not gotUserId then
			warn("Could not find an account associated with", userName .. '!')
			return
		end

		warn("Loading appearance...")

		local success, hDesc = pcall(function ()
			return Players:GetHumanoidDescriptionFromUserId(userId)
		end)

		if not success then
			warn("Could not get a HumanoidDescription for", userName, "at this time!")
			return
		end

		editor:ApplyDescription(hDesc)
		Selection:Set{}

		warn("Done!")
	end
end

local function onInputBegan(inputObject)
	local inputType = inputObject.UserInputType
	
	if inputType.Name == "MouseButton2" then
		local menuId = getId("TGE_Menu")
		local menu = plugin:CreatePluginMenu(menuId)

		local fromSelection = menu:AddNewAction(newId(), "Set appearance from selected HumanoidDescription")
		local fromUsername  = menu:AddNewAction(newId(), "Set appearance from entered Username")
		
		local selected = menu:ShowAsync()
		menu:Destroy()
		
		if selected == fromSelection then
			local set = false

			for _,target in pairs(Selection:Get()) do
				if target:IsA("HumanoidDescription") then
					editor:ApplyDescription(target)
					set = true

					break
				end
			end

			if not set then
				warn("Select a HumanoidDescription before using this action!")
			end
		elseif selected == fromUsername then
			enterUsername.Visible = true
			input:CaptureFocus()
			input.Text = ""
		end
	end
end

input.FocusLost:Connect(onFocusLost)
inputSink.InputBegan:Connect(onInputBegan)

------------------------------------------------------------------------------------------------------
-- Tool Mounting
------------------------------------------------------------------------------------------------------

local function onSelectionChanged()
	if not preview.Enabled or editor.InUse then
		return
	end

	local tool

	for _,object in pairs(Selection:Get()) do
		if object:IsA("Tool") then
			tool = object
			break
		elseif object:IsA("BasePart") then
			tool = object:FindFirstAncestorWhichIsA("Tool")
			
			if tool then
				break
			end
		end
	end
	
	local mounted = editor:BindTool(tool)
	selectATool.Visible = (not mounted)
	editButton.Visible = mounted
end

local function onEditActivated()
	if not editor.InUse then
		editButton.Visible = false
		ribbonTools.Visible = true

		editor:EditGrip(plugin)

		editButton.Visible = true
		ribbonTools.Visible = false
	else
		Selection:Set{editor.Tool}
		editor.InUse = false
	end
end

editButton.Activated:Connect(onEditActivated)
Selection.SelectionChanged:Connect(onSelectionChanged)

------------------------------------------------------------------------------------------------------
-- Buttons
------------------------------------------------------------------------------------------------------

local enabledChanged = preview:GetPropertyChangedSignal("Enabled")
local dummyPos = UDim2.new()

local function updateButton()
	button:SetActive(preview.Enabled)
end

local function onButtonClicked()
	preview.Enabled = not preview.Enabled
	
	if preview.Enabled then
		-- Check if we have a tool selected.
		onSelectionChanged()
	end
end

for _,btn in pairs(ribbonTools:GetChildren()) do
	if btn:IsA("TextButton") then
		btn.MouseButton1Down:Connect(function ()
			plugin:SelectRibbonTool(btn.Name, dummyPos)
		end)
	end
end

updateButton()
enabledChanged:Connect(updateButton)
button.Click:Connect(onButtonClicked)

------------------------------------------------------------------------------------------------------</string>
    </Properties>
    <Item class="Folder" referent="1">
      <Properties>
        <string name="Name">Animations</string>
      </Properties>
      <Item class="Animation" referent="2">
        <Properties>
          <string name="Name">Idle</string>
          <Content name="AnimationId">
            <url>rbxassetid://507766388</url>
          </Content>
        </Properties>
      </Item>
      <Item class="Animation" referent="3">
        <Properties>
          <string name="Name">Tool</string>
          <Content name="AnimationId">
            <url>rbxassetid://507768375</url>
          </Content>
        </Properties>
      </Item>
    </Item>
    <Item class="Folder" referent="4">
      <Properties>
        <string name="Name">Modules</string>
      </Properties>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">ToolEditor</string>
          <string name="Source">local ChangeHistoryService = game:GetService("ChangeHistoryService")
local Selection = game:GetService("Selection")
local Players = game:GetService("Players")

local Modules = script.Parent
local Project = Modules.Parent

local ToolEditor = {}
ToolEditor.__index = ToolEditor

function ToolEditor.new()
    local hDesc = Instance.new("HumanoidDescription")
    local gray = BrickColor.new(-1).Color
    
    for _,limb in pairs(Enum.BodyPart:GetEnumItems()) do
        hDesc[limb.Name .. "Color"] = gray
    end
    
    local dummy = Players:CreateHumanoidModelFromDescription(hDesc, "R15")
    local humanoid = dummy:WaitForChild("Humanoid")

	-- Avoid unintended script injection.
    local animate = dummy:WaitForChild("Animate")
    animate:Destroy()
    
    local animator = Instance.new("Animator")
    animator.Parent = humanoid
    
    local worldModel = Instance.new("WorldModel")
    dummy.Parent = worldModel

    local rootPart = humanoid.RootPart
    rootPart.Anchored = true
    
    local editor = 
    {
        Dummy = dummy;

        Humanoid = humanoid;
        RootPart = rootPart;

        Animator = animator;
        WorldModel = worldModel;
    }

    return setmetatable(editor, ToolEditor)
end

function ToolEditor:SetParent(parent)
    local worldModel = self.WorldModel
    worldModel.Parent = parent
end

function ToolEditor:FindObject(className, name)
    local dummy = self.Dummy
    local child = dummy:FindFirstChild(name, true)

    if child and child:IsA(className) then
        return child
    end
end

function ToolEditor:FindLimb(limbName)
    return self:FindObject("BasePart", limbName)
end

function ToolEditor:FindJoint(jointName)
    return self:FindObject("JointInstance", jointName)
end

function ToolEditor:FindAttachment(attName)
    return self:FindObject("Attachment", attName)
end

function ToolEditor:GetCameraZoom()
    local handle = self.Handle

    if handle then
        local size = handle.Size
        return math.max(4, size.Magnitude * 1.5)
    end

    local cf, size = self.Dummy:GetBoundingBox()
    return size.Magnitude
end

function ToolEditor:StepAnimator(delta)
    local animator = self.Animator
    animator:StepAnimations(delta)
end

function ToolEditor:ApplyDescription(hDesc)
    local humanoid = self.Humanoid
    humanoid:ApplyDescription(hDesc)
end

function ToolEditor:StartAnimations()
    local anims = Project.Animations
    local animator = self.Animator

    for _,track in pairs(animator:GetPlayingAnimationTracks()) do
        track:Stop()
    end

    for _,anim in pairs(anims:GetChildren()) do
        local track = animator:LoadAnimation(anim)
        track:Play()
    end
end

function ToolEditor:Connect(name, event)
    return event:Connect(function (...)
        self[name](self, ...)
    end)
end

function ToolEditor:BindProperty(object, property, funcName)
    local event = object:GetPropertyChangedSignal(property)
    return self:Connect(funcName, event)
end

function ToolEditor:RefreshGrip()
    local rightGrip = self.RightGrip
    local handle = self.Handle
    local tool = self.Tool

    if rightGrip and handle then
        local grip = tool.Grip
        rightGrip.C1 = grip
    end
end

function ToolEditor:ReflectGrip()
    local tool = self.Tool
    local gripEditor = self.GripEditor

    if tool and gripEditor then
        tool.Grip = gripEditor.CFrame
    end
end

function ToolEditor:ClearTool()
    if self.GripRefresh then
        self.GripRefresh:Disconnect()
        self.GripRefresh = nil
    end

    if self.GripReflect then
        self.GripReflect:Disconnect()
        self.GripReflect = nil
    end

    if self.Handle then
        self.Handle:Destroy()
        self.Handle = nil
    end

    if self.GripEditor then
        self.GripEditor:Destroy()
        self.GripEditor = nil
    end

    if self.RightGrip then
        self.RightGrip.Part1 = nil
    end

    self.Tool = nil
end

function ToolEditor:CreateGhostArm()
    local dummy = self.Dummy:Clone()
    local humanoid = dummy.Humanoid
    
    for _,child in pairs(dummy:GetChildren()) do
        if child:IsA("BasePart") then
            local limb = humanoid:GetLimb(child)

            if limb.Name == "RightArm" then
                child:ClearAllChildren()
                child.Anchored = true
                child.Locked = true
                
                if child.Name == "RightHand" then
                    dummy.PrimaryPart = child
                end
            else
                child:Destroy()
            end
        elseif child:IsA("Accoutrement") then
            child:Destroy()
        end
    end

    dummy.Archivable = false
    dummy.Name = "PreviewArm"

    return dummy
end

function ToolEditor:BindTool(tool)
    if tool == nil then
        self:ClearTool()
        return false
    end

    if self.Tool == tool then
        return true
    elseif self.Tool ~= nil then
        self:ClearTool()
    end

    local dummy = self.Dummy
    local handle = tool:FindFirstChild("Handle")
    
    if not (handle and handle.Archivable and handle:IsA("BasePart")) then
        return
    end
    
    local rightHand = self:FindLimb("RightHand")
    local rightGrip = self.RightGrip
    
    if not (rightGrip and rightGrip:IsDescendantOf(dummy)) then
        local gripAtt = self:FindAttachment("RightGripAttachment")

        rightGrip = Instance.new("Motor6D")
        rightGrip.C0 = gripAtt.CFrame
        rightGrip.Name = "RightGrip"
        rightGrip.Part0 = rightHand
        rightGrip.Parent = rightHand

        self.RightGrip = rightGrip
    end

    local newHandle = handle:Clone()
    newHandle.Parent = self.Dummy

    for _,joint in pairs(newHandle:GetJoints()) do
        joint:Destroy()
    end

    for _,child in pairs(newHandle:GetChildren()) do
        if child:IsA("Sound") then
            child.PlayOnRemove = false
        end
    end

    newHandle.Locked = true
    newHandle.Anchored = false
    rightGrip.Part1 = newHandle

    local gripEditor = Instance.new("Attachment")
    gripEditor.Archivable = false
    gripEditor.CFrame = tool.Grip
    gripEditor.Name = "Grip"
    
    for _,part in pairs(tool:GetDescendants()) do
        if not part:IsA("BasePart") then
            continue
        end

        if part == handle then
            continue
        end

        if not part.Archivable then
            continue
        end

        if not part:IsDescendantOf(tool) then
            continue
        end
        
        local copy = part:Clone()
        copy.Anchored = false
        copy.Locked = true
        copy.Parent = newHandle

        for _,joint in pairs(copy:GetJoints()) do
            joint:Destroy()
        end
        
        local weld = Instance.new("Weld")
        weld.C0 = handle.CFrame:ToObjectSpace(part.CFrame)
        weld.Part0 = newHandle
        weld.Part1 = copy
        weld.Parent = copy
    end

    self.GripRefresh = self:BindProperty(tool, "Grip", "RefreshGrip")
    self.GripReflect = self:BindProperty(gripEditor, "CFrame", "ReflectGrip")
    
    self.GripEditor = gripEditor
    self.DirectHandle = handle
    
    self.Handle = newHandle
    self.Tool = tool

    self:RefreshGrip()

    return (self.Handle ~= nil)
end

function ToolEditor:EditGrip(plugin)
    local tool = self.Tool
    local handle = self.Handle

    local gripEditor = self.GripEditor
    local directHandle = self.DirectHandle

    if tool and handle and gripEditor then
        local editor = Instance.new("Model")
        editor.Name = "Tool Grip Editor"
        editor.Archivable = false
        editor.Parent = workspace

        local proxyHandle = handle:Clone()
        proxyHandle.Locked = true
        proxyHandle.Anchored = true
        proxyHandle.Parent = editor
        
        for _,desc in pairs(proxyHandle:GetDescendants()) do
            if desc:IsA("BasePart") then
                if tool:IsDescendantOf(workspace) then
                    desc:Destroy()
                else 
                    desc.Locked = true
                    desc.Anchored = true
                    desc.Parent = editor
                end
            end
        end
        
        gripEditor.Parent = proxyHandle
        editor.PrimaryPart = proxyHandle
        editor:SetPrimaryPartCFrame(directHandle.CFrame)
        
        local camera = workspace.CurrentCamera
        self.InUse = true

        if camera then
            local cf = camera.CFrame
            local focus = gripEditor.WorldPosition

            local lookVector = cf.LookVector
            local extents = handle.Size.Magnitude

            camera.CFrame = CFrame.new(focus - (lookVector * extents * 1.5), focus)
            camera.Focus = CFrame.new(focus)
        end

        if tool:IsDescendantOf(workspace) then
            proxyHandle.Transparency = 1
            
            for _,child in pairs(proxyHandle:GetChildren()) do
                if child ~= gripEditor then
                    if child:IsA("Sound") then
                        child.PlayOnRemove = false
                    end

                    child:Destroy()
                end
            end
        end
        
        local ghostArm = self:CreateGhostArm()
        ghostArm.Parent = editor

        self.GhostArm = ghostArm
        Selection:Set{gripEditor}
        
        if plugin:GetSelectedRibbonTool() ~= Enum.RibbonTool.Move then
            plugin:SelectRibbonTool("Move", UDim2.new())
        end

        ChangeHistoryService:SetWaypoint("Begin Grip Edit")
        Selection.SelectionChanged:Wait()
            
        gripEditor.Parent = nil
        ghostArm.Parent = nil
        
        self.GhostArm = nil
        self.InUse = false

        ChangeHistoryService:SetWaypoint("End Grip Edit")
        editor:Destroy()
    end
end

-----------------------------------------------------------
-- TODO: If this module is ever constructed multiple times
--       then return the ToolEditor table itself. At the
--       present moment, it acts more like a singleton.
-----------------------------------------------------------

return ToolEditor.new()</string>
        </Properties>
      </Item>
    </Item>
    <Item class="Folder" referent="6">
      <Properties>
        <string name="Name">UI</string>
      </Properties>
      <Item class="TextButton" referent="7">
        <Properties>
          <string name="Name">EditButton</string>
          <Vector2 name="AnchorPoint">
            <X>0.5</X>
            <Y>1</Y>
          </Vector2>
          <token name="Font">16</token>
          <UDim2 name="Position">
            <XS>0.5</XS>
            <XO>0</XO>
            <YS>1</YS>
            <YO>-20</YO>
          </UDim2>
          <UDim2 name="Size">
            <XS>1</XS>
            <XO>-50</XO>
            <YS>0</YS>
            <YO>40</YO>
          </UDim2>
          <token name="Style">4</token>
          <string name="Text">Edit Tool Grip</string>
          <Color3 name="TextColor3">
            <R>1</R>
            <G>1</G>
            <B>1</B>
          </Color3>
          <float name="TextSize">24</float>
          <bool name="Visible">false</bool>
          <int name="ZIndex">10</int>
        </Properties>
        <Item class="UISizeConstraint" referent="8">
          <Properties>
            <string name="Name">SizeCap</string>
            <Vector2 name="MaxSize">
              <X>300</X>
              <Y>40</Y>
            </Vector2>
          </Properties>
        </Item>
      </Item>
      <Item class="TextLabel" referent="9">
        <Properties>
          <string name="Name">EnterUsername</string>
          <bool name="Active">false</bool>
          <Vector2 name="AnchorPoint">
            <X>0</X>
            <Y>0</Y>
          </Vector2>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <bool name="AutoLocalize">true</bool>
          <token name="AutomaticSize">0</token>
          <Color3 name="BackgroundColor3">
            <R>0.18039216</R>
            <G>0.18039216</G>
            <B>0.18039216</B>
          </Color3>
          <float name="BackgroundTransparency">0</float>
          <Color3 name="BorderColor3">
            <R>0.10588236</R>
            <G>0.16470589</G>
            <B>0.20784315</B>
          </Color3>
          <token name="BorderMode">0</token>
          <int name="BorderSizePixel">1</int>
          <bool name="ClipsDescendants">false</bool>
          <bool name="Draggable">false</bool>
          <token name="Font">16</token>
          <int name="LayoutOrder">0</int>
          <float name="LineHeight">1</float>
          <Ref name="NextSelectionDown">null</Ref>
          <Ref name="NextSelectionLeft">null</Ref>
          <Ref name="NextSelectionRight">null</Ref>
          <Ref name="NextSelectionUp">null</Ref>
          <UDim2 name="Position">
            <XS>0</XS>
            <XO>0</XO>
            <YS>0</YS>
            <YO>0</YO>
          </UDim2>
          <bool name="RichText">false</bool>
          <Ref name="RootLocalizationTable">null</Ref>
          <float name="Rotation">0</float>
          <bool name="Selectable">false</bool>
          <Ref name="SelectionImageObject">null</Ref>
          <UDim2 name="Size">
            <XS>1</XS>
            <XO>0</XO>
            <YS>1</YS>
            <YO>0</YO>
          </UDim2>
          <token name="SizeConstraint">0</token>
          <int64 name="SourceAssetId">-1</int64>
          <BinaryString name="Tags"></BinaryString>
          <string name="Text"><![CDATA[Enter a Username:

]]></string>
          <Color3 name="TextColor3">
            <R>1</R>
            <G>1</G>
            <B>1</B>
          </Color3>
          <bool name="TextScaled">false</bool>
          <float name="TextSize">36</float>
          <Color3 name="TextStrokeColor3">
            <R>0</R>
            <G>0</G>
            <B>0</B>
          </Color3>
          <float name="TextStrokeTransparency">1</float>
          <float name="TextTransparency">0</float>
          <token name="TextTruncate">0</token>
          <bool name="TextWrapped">false</bool>
          <token name="TextXAlignment">2</token>
          <token name="TextYAlignment">1</token>
          <bool name="Visible">false</bool>
          <int name="ZIndex">100</int>
        </Properties>
        <Item class="TextBox" referent="10">
          <Properties>
            <string name="Name">Input</string>
            <bool name="Active">true</bool>
            <Vector2 name="AnchorPoint">
              <X>0.5</X>
              <Y>0.5</Y>
            </Vector2>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="AutoLocalize">true</bool>
            <token name="AutomaticSize">0</token>
            <Color3 name="BackgroundColor3">
              <R>0.14509805</R>
              <G>0.14509805</G>
              <B>0.14509805</B>
            </Color3>
            <float name="BackgroundTransparency">0</float>
            <Color3 name="BorderColor3">
              <R>0.10196079</R>
              <G>0.10196079</G>
              <B>0.10196079</B>
            </Color3>
            <token name="BorderMode">0</token>
            <int name="BorderSizePixel">1</int>
            <bool name="ClearTextOnFocus">true</bool>
            <bool name="ClipsDescendants">false</bool>
            <bool name="Draggable">false</bool>
            <token name="Font">16</token>
            <int name="LayoutOrder">0</int>
            <float name="LineHeight">1</float>
            <bool name="MultiLine">false</bool>
            <Ref name="NextSelectionDown">null</Ref>
            <Ref name="NextSelectionLeft">null</Ref>
            <Ref name="NextSelectionRight">null</Ref>
            <Ref name="NextSelectionUp">null</Ref>
            <Color3 name="PlaceholderColor3">
              <R>0.7</R>
              <G>0.7</G>
              <B>0.7</B>
            </Color3>
            <string name="PlaceholderText"></string>
            <UDim2 name="Position">
              <XS>0.5</XS>
              <XO>0</XO>
              <YS>0.55</YS>
              <YO>0</YO>
            </UDim2>
            <bool name="RichText">false</bool>
            <Ref name="RootLocalizationTable">null</Ref>
            <float name="Rotation">0</float>
            <bool name="Selectable">true</bool>
            <Ref name="SelectionImageObject">null</Ref>
            <bool name="ShowNativeInput">true</bool>
            <UDim2 name="Size">
              <XS>0.7</XS>
              <XO>0</XO>
              <YS>0.2</YS>
              <YO>0</YO>
            </UDim2>
            <token name="SizeConstraint">0</token>
            <int64 name="SourceAssetId">-1</int64>
            <BinaryString name="Tags"></BinaryString>
            <string name="Text"></string>
            <Color3 name="TextColor3">
              <R>0.8000001</R>
              <G>0.8000001</G>
              <B>0.8000001</B>
            </Color3>
            <bool name="TextEditable">true</bool>
            <bool name="TextScaled">true</bool>
            <float name="TextSize">8</float>
            <Color3 name="TextStrokeColor3">
              <R>0</R>
              <G>0</G>
              <B>0</B>
            </Color3>
            <float name="TextStrokeTransparency">1</float>
            <float name="TextTransparency">0</float>
            <token name="TextTruncate">0</token>
            <bool name="TextWrapped">true</bool>
            <token name="TextXAlignment">2</token>
            <token name="TextYAlignment">1</token>
            <bool name="Visible">true</bool>
            <int name="ZIndex">1000</int>
          </Properties>
          <Item class="UIAspectRatioConstraint" referent="11">
            <Properties>
              <string name="Name">AspectRatio</string>
              <float name="AspectRatio">7</float>
              <token name="AspectType">0</token>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <token name="DominantAxis">0</token>
              <int64 name="SourceAssetId">-1</int64>
              <BinaryString name="Tags"></BinaryString>
            </Properties>
          </Item>
        </Item>
      </Item>
      <Item class="TextButton" referent="12">
        <Properties>
          <string name="Name">InputSink</string>
          <float name="BackgroundTransparency">1</float>
          <UDim2 name="Size">
            <XS>1</XS>
            <XO>0</XO>
            <YS>1</YS>
            <YO>0</YO>
          </UDim2>
          <string name="Text"></string>
        </Properties>
      </Item>
      <Item class="Frame" referent="13">
        <Properties>
          <string name="Name">RibbonTools</string>
          <bool name="Active">false</bool>
          <Vector2 name="AnchorPoint">
            <X>0</X>
            <Y>1</Y>
          </Vector2>
          <BinaryString name="AttributesSerialize"></BinaryString>
          <bool name="AutoLocalize">true</bool>
          <Color3 name="BackgroundColor3">
            <R>1</R>
            <G>1</G>
            <B>1</B>
          </Color3>
          <float name="BackgroundTransparency">1</float>
          <Color3 name="BorderColor3">
            <R>0.10588236</R>
            <G>0.16470589</G>
            <B>0.20784315</B>
          </Color3>
          <token name="BorderMode">0</token>
          <int name="BorderSizePixel">1</int>
          <bool name="ClipsDescendants">false</bool>
          <bool name="Draggable">false</bool>
          <int name="LayoutOrder">0</int>
          <Ref name="NextSelectionDown">null</Ref>
          <Ref name="NextSelectionLeft">null</Ref>
          <Ref name="NextSelectionRight">null</Ref>
          <Ref name="NextSelectionUp">null</Ref>
          <UDim2 name="Position">
            <XS>0</XS>
            <XO>20</XO>
            <YS>1</YS>
            <YO>-20</YO>
          </UDim2>
          <Ref name="RootLocalizationTable">null</Ref>
          <float name="Rotation">0</float>
          <bool name="Selectable">false</bool>
          <Ref name="SelectionImageObject">null</Ref>
          <UDim2 name="Size">
            <XS>0</XS>
            <XO>70</XO>
            <YS>0</YS>
            <YO>70</YO>
          </UDim2>
          <token name="SizeConstraint">0</token>
          <token name="Style">0</token>
          <BinaryString name="Tags"></BinaryString>
          <bool name="Visible">false</bool>
          <int name="ZIndex">10</int>
        </Properties>
        <Item class="UIListLayout" referent="14">
          <Properties>
            <string name="Name">List</string>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <token name="FillDirection">0</token>
            <token name="HorizontalAlignment">1</token>
            <UDim name="Padding">
              <S>0</S>
              <O>10</O>
            </UDim>
            <token name="SortOrder">2</token>
            <BinaryString name="Tags"></BinaryString>
            <token name="VerticalAlignment">1</token>
          </Properties>
        </Item>
        <Item class="TextButton" referent="15">
          <Properties>
            <string name="Name">Move</string>
            <bool name="Active">true</bool>
            <Vector2 name="AnchorPoint">
              <X>0</X>
              <Y>0</Y>
            </Vector2>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="AutoButtonColor">true</bool>
            <bool name="AutoLocalize">true</bool>
            <Color3 name="BackgroundColor3">
              <R>1</R>
              <G>1</G>
              <B>1</B>
            </Color3>
            <float name="BackgroundTransparency">0</float>
            <Color3 name="BorderColor3">
              <R>0.10588236</R>
              <G>0.16470589</G>
              <B>0.20784315</B>
            </Color3>
            <token name="BorderMode">0</token>
            <int name="BorderSizePixel">1</int>
            <bool name="ClipsDescendants">false</bool>
            <bool name="Draggable">false</bool>
            <token name="Font">3</token>
            <int name="LayoutOrder">0</int>
            <float name="LineHeight">1</float>
            <bool name="Modal">false</bool>
            <Ref name="NextSelectionDown">null</Ref>
            <Ref name="NextSelectionLeft">null</Ref>
            <Ref name="NextSelectionRight">null</Ref>
            <Ref name="NextSelectionUp">null</Ref>
            <UDim2 name="Position">
              <XS>0</XS>
              <XO>0</XO>
              <YS>0</YS>
              <YO>0</YO>
            </UDim2>
            <Ref name="RootLocalizationTable">null</Ref>
            <float name="Rotation">0</float>
            <bool name="Selectable">true</bool>
            <bool name="Selected">false</bool>
            <Ref name="SelectionImageObject">null</Ref>
            <UDim2 name="Size">
              <XS>1</XS>
              <XO>0</XO>
              <YS>1</YS>
              <YO>0</YO>
            </UDim2>
            <token name="SizeConstraint">0</token>
            <token name="Style">4</token>
            <BinaryString name="Tags"></BinaryString>
            <string name="Text"></string>
            <Color3 name="TextColor3">
              <R>0</R>
              <G>0</G>
              <B>0</B>
            </Color3>
            <bool name="TextScaled">false</bool>
            <float name="TextSize">14</float>
            <Color3 name="TextStrokeColor3">
              <R>0</R>
              <G>0</G>
              <B>0</B>
            </Color3>
            <float name="TextStrokeTransparency">1</float>
            <float name="TextTransparency">0</float>
            <token name="TextTruncate">0</token>
            <bool name="TextWrapped">false</bool>
            <token name="TextXAlignment">2</token>
            <token name="TextYAlignment">1</token>
            <bool name="Visible">true</bool>
            <int name="ZIndex">1</int>
          </Properties>
          <Item class="ImageLabel" referent="16">
            <Properties>
              <string name="Name">Icon</string>
              <bool name="Active">false</bool>
              <Vector2 name="AnchorPoint">
                <X>0.5</X>
                <Y>0.5</Y>
              </Vector2>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <bool name="AutoLocalize">true</bool>
              <Color3 name="BackgroundColor3">
                <R>1</R>
                <G>1</G>
                <B>1</B>
              </Color3>
              <float name="BackgroundTransparency">1</float>
              <Color3 name="BorderColor3">
                <R>0.10588236</R>
                <G>0.16470589</G>
                <B>0.20784315</B>
              </Color3>
              <token name="BorderMode">0</token>
              <int name="BorderSizePixel">1</int>
              <bool name="ClipsDescendants">false</bool>
              <bool name="Draggable">false</bool>
              <Content name="Image">
                <url>rbxassetid://4462132199</url>
              </Content>
              <Color3 name="ImageColor3">
                <R>1</R>
                <G>1</G>
                <B>1</B>
              </Color3>
              <Vector2 name="ImageRectOffset">
                <X>0</X>
                <Y>0</Y>
              </Vector2>
              <Vector2 name="ImageRectSize">
                <X>0</X>
                <Y>0</Y>
              </Vector2>
              <float name="ImageTransparency">0</float>
              <int name="LayoutOrder">0</int>
              <Ref name="NextSelectionDown">null</Ref>
              <Ref name="NextSelectionLeft">null</Ref>
              <Ref name="NextSelectionRight">null</Ref>
              <Ref name="NextSelectionUp">null</Ref>
              <UDim2 name="Position">
                <XS>0.5</XS>
                <XO>0</XO>
                <YS>0.5</YS>
                <YO>0</YO>
              </UDim2>
              <Ref name="RootLocalizationTable">null</Ref>
              <float name="Rotation">0</float>
              <token name="ScaleType">0</token>
              <bool name="Selectable">false</bool>
              <Ref name="SelectionImageObject">null</Ref>
              <UDim2 name="Size">
                <XS>1</XS>
                <XO>0</XO>
                <YS>1</YS>
                <YO>0</YO>
              </UDim2>
              <token name="SizeConstraint">0</token>
              <Rect2D name="SliceCenter">
                <min>
                  <X>0</X>
                  <Y>0</Y>
                </min>
                <max>
                  <X>0</X>
                  <Y>0</Y>
                </max>
              </Rect2D>
              <float name="SliceScale">1</float>
              <BinaryString name="Tags"></BinaryString>
              <UDim2 name="TileSize">
                <XS>1</XS>
                <XO>0</XO>
                <YS>1</YS>
                <YO>0</YO>
              </UDim2>
              <bool name="Visible">true</bool>
              <int name="ZIndex">1</int>
            </Properties>
          </Item>
        </Item>
        <Item class="TextButton" referent="17">
          <Properties>
            <string name="Name">Rotate</string>
            <bool name="Active">true</bool>
            <Vector2 name="AnchorPoint">
              <X>0</X>
              <Y>0</Y>
            </Vector2>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <bool name="AutoButtonColor">true</bool>
            <bool name="AutoLocalize">true</bool>
            <Color3 name="BackgroundColor3">
              <R>1</R>
              <G>1</G>
              <B>1</B>
            </Color3>
            <float name="BackgroundTransparency">0</float>
            <Color3 name="BorderColor3">
              <R>0.10588236</R>
              <G>0.16470589</G>
              <B>0.20784315</B>
            </Color3>
            <token name="BorderMode">0</token>
            <int name="BorderSizePixel">1</int>
            <bool name="ClipsDescendants">false</bool>
            <bool name="Draggable">false</bool>
            <token name="Font">12</token>
            <int name="LayoutOrder">0</int>
            <float name="LineHeight">1</float>
            <bool name="Modal">false</bool>
            <Ref name="NextSelectionDown">null</Ref>
            <Ref name="NextSelectionLeft">null</Ref>
            <Ref name="NextSelectionRight">null</Ref>
            <Ref name="NextSelectionUp">null</Ref>
            <UDim2 name="Position">
              <XS>0</XS>
              <XO>0</XO>
              <YS>0</YS>
              <YO>0</YO>
            </UDim2>
            <Ref name="RootLocalizationTable">null</Ref>
            <float name="Rotation">0</float>
            <bool name="Selectable">true</bool>
            <bool name="Selected">false</bool>
            <Ref name="SelectionImageObject">null</Ref>
            <UDim2 name="Size">
              <XS>1</XS>
              <XO>0</XO>
              <YS>1</YS>
              <YO>0</YO>
            </UDim2>
            <token name="SizeConstraint">0</token>
            <token name="Style">3</token>
            <BinaryString name="Tags"></BinaryString>
            <string name="Text"></string>
            <Color3 name="TextColor3">
              <R>0</R>
              <G>0</G>
              <B>0</B>
            </Color3>
            <bool name="TextScaled">false</bool>
            <float name="TextSize">14</float>
            <Color3 name="TextStrokeColor3">
              <R>0</R>
              <G>0</G>
              <B>0</B>
            </Color3>
            <float name="TextStrokeTransparency">1</float>
            <float name="TextTransparency">0</float>
            <token name="TextTruncate">0</token>
            <bool name="TextWrapped">false</bool>
            <token name="TextXAlignment">2</token>
            <token name="TextYAlignment">1</token>
            <bool name="Visible">true</bool>
            <int name="ZIndex">1</int>
          </Properties>
          <Item class="ImageLabel" referent="18">
            <Properties>
              <string name="Name">Icon</string>
              <bool name="Active">false</bool>
              <Vector2 name="AnchorPoint">
                <X>0.5</X>
                <Y>0.5</Y>
              </Vector2>
              <BinaryString name="AttributesSerialize"></BinaryString>
              <bool name="AutoLocalize">true</bool>
              <Color3 name="BackgroundColor3">
                <R>1</R>
                <G>1</G>
                <B>1</B>
              </Color3>
              <float name="BackgroundTransparency">1</float>
              <Color3 name="BorderColor3">
                <R>0.10588236</R>
                <G>0.16470589</G>
                <B>0.20784315</B>
              </Color3>
              <token name="BorderMode">0</token>
              <int name="BorderSizePixel">1</int>
              <bool name="ClipsDescendants">false</bool>
              <bool name="Draggable">false</bool>
              <Content name="Image">
                <url>rbxassetid://4462132461</url>
              </Content>
              <Color3 name="ImageColor3">
                <R>1</R>
                <G>1</G>
                <B>1</B>
              </Color3>
              <Vector2 name="ImageRectOffset">
                <X>0</X>
                <Y>0</Y>
              </Vector2>
              <Vector2 name="ImageRectSize">
                <X>0</X>
                <Y>0</Y>
              </Vector2>
              <float name="ImageTransparency">0</float>
              <int name="LayoutOrder">0</int>
              <Ref name="NextSelectionDown">null</Ref>
              <Ref name="NextSelectionLeft">null</Ref>
              <Ref name="NextSelectionRight">null</Ref>
              <Ref name="NextSelectionUp">null</Ref>
              <UDim2 name="Position">
                <XS>0.5</XS>
                <XO>0</XO>
                <YS>0.5</YS>
                <YO>0</YO>
              </UDim2>
              <Ref name="RootLocalizationTable">null</Ref>
              <float name="Rotation">0</float>
              <token name="ScaleType">0</token>
              <bool name="Selectable">false</bool>
              <Ref name="SelectionImageObject">null</Ref>
              <UDim2 name="Size">
                <XS>1</XS>
                <XO>0</XO>
                <YS>1</YS>
                <YO>0</YO>
              </UDim2>
              <token name="SizeConstraint">0</token>
              <Rect2D name="SliceCenter">
                <min>
                  <X>0</X>
                  <Y>0</Y>
                </min>
                <max>
                  <X>0</X>
                  <Y>0</Y>
                </max>
              </Rect2D>
              <float name="SliceScale">1</float>
              <BinaryString name="Tags"></BinaryString>
              <UDim2 name="TileSize">
                <XS>1</XS>
                <XO>0</XO>
                <YS>1</YS>
                <YO>0</YO>
              </UDim2>
              <bool name="Visible">true</bool>
              <int name="ZIndex">1</int>
            </Properties>
          </Item>
        </Item>
      </Item>
      <Item class="TextLabel" referent="19">
        <Properties>
          <string name="Name">SelectATool</string>
          <Color3 name="BackgroundColor3">
            <R>0.125</R>
            <G>0.125</G>
            <B>0.125</B>
          </Color3>
          <float name="BackgroundTransparency">0.1</float>
          <token name="Font">16</token>
          <UDim2 name="Size">
            <XS>1</XS>
            <XO>0</XO>
            <YS>1</YS>
            <YO>0</YO>
          </UDim2>
          <string name="Text"><![CDATA[Select a Tool
]]></string>
          <Color3 name="TextColor3">
            <R>1</R>
            <G>1</G>
            <B>1</B>
          </Color3>
          <float name="TextSize">36</float>
        </Properties>
      </Item>
    </Item>
  </Item>
</roblox>